// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String   @id @default(uuid())
  supabaseId String   @unique // Supabase auth user ID
  email      String   @unique
  name       String?
  avatarUrl  String?
  provider   String   @default("email") // "email", "google", etc.
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  coach Coach?
}

model Coach {
  id               String             @id @default(uuid())
  name             String
  email            String             @unique
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String             @unique
  groups           Group[]
  teams            Team[]
  exerciseTemplates ExerciseTemplate[]
  createdAt        DateTime           @default(now())
}

model Group {
  id           String         @id @default(uuid())
  name         String
  coach        Coach          @relation(fields: [coachId], references: [id])
  coachId      String
  createdAt    DateTime       @default(now())
  TrainingPlan TrainingPlan[]
}

model TrainingPlan {
  id        String    @id @default(uuid())
  group     Group     @relation(fields: [groupId], references: [id])
  groupId   String
  title     String
  date      DateTime
  sections  Section[]
  createdAt DateTime  @default(now())
}

model Section {
  id             String       @id @default(uuid())
  trainingPlan   TrainingPlan @relation(fields: [trainingPlanId], references: [id])
  trainingPlanId String
  type           String // "warmup", "main", "games", "ending"
  exercises      Exercise[]
}

model Exercise {
  id          String   @id @default(uuid())
  section     Section  @relation(fields: [sectionId], references: [id])
  sectionId   String
  title       String
  description String
  diagramSvg  String? // SVG string
  createdBy   String // "manual" | "groq"
  createdAt   DateTime @default(now())
}

model Team {
  id           String          @id @default(uuid())
  name         String
  description  String?
  coach        Coach           @relation(fields: [coachId], references: [id], onDelete: Cascade)
  coachId      String
  players      Player[]
  recordings   PlayRecording[]
  trainingSets TrainingSet[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model Player {
  id        String   @id @default(uuid())
  name      String
  position  String?  // "PG", "SG", "SF", "PF", "C"
  number    Int?
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teamId, number])
}

model PlayRecording {
  id        String   @id @default(uuid())
  name      String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  data      Json     // Store the recording data as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TrainingSet {
  id          String   @id @default(uuid())
  name        String
  description String?
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      String
  exercises   TrainingSetExercise[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TrainingSetExercise {
  id            String      @id @default(uuid())
  name          String
  description   String?
  duration      Int?        // Duration in minutes
  category      String?     // "warmup", "skills", "scrimmage", "conditioning", etc.
  trainingSet   TrainingSet @relation(fields: [trainingSetId], references: [id], onDelete: Cascade)
  trainingSetId String
  order         Int         @default(0)
  exerciseId    String?     // Reference to ExerciseTemplate if created from template
  exercise      ExerciseTemplate? @relation(fields: [exerciseId], references: [id])
  createdAt     DateTime    @default(now())
}

model ExerciseTemplate {
  id          String    @id @default(uuid())
  name        String    // Exercise name
  description String?   // Exercise description
  duration    Int?      // Default duration in minutes
  category    String?   // "warmup", "ball_handling", "shooting", "defense", "conditioning", etc.
  difficulty  String?   // "beginner", "intermediate", "advanced"
  equipment   String?   // Equipment needed
  instructions String?  // Detailed instructions
  diagramData Json?     // Basketball court diagram data (positions, movements, actions)
  coach       Coach     @relation(fields: [coachId], references: [id], onDelete: Cascade)
  coachId     String
  isPublic    Boolean   @default(false) // For future payment features
  usageCount  Int       @default(0)     // Track how often it's used
  trainingSetExercises TrainingSetExercise[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
